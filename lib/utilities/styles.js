'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var lexers = require('occam-lexers'),
    ///
parsers = require('occam-parsers'); ///

var Style = require('../style');

var CSSLexer = lexers.CSSLexer,
    CSSParser = parsers.CSSParser;


var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing(),
    styleMap = {};

function generateStyle(args, className) {
  var superStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, cssString, index) {
    var arg = args[index];

    content += cssString;

    switch (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) {
      case 'string':
        content += arg;
        break;

      case 'function':
        content += arg();
        break;
    }

    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (superStyle !== null) {
    style.extends(superStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];

  return style;
}

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);

    stylesCSS += styleCSS;

    return stylesCSS;
  }, '');

  return stylesCSS;
}

module.exports = {
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle,
  retrieveStylesCSS: retrieveStylesCSS
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJwYXJzZXJzIiwiU3R5bGUiLCJDU1NMZXhlciIsIkNTU1BhcnNlciIsImNzc0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJzdHlsZU1hcCIsImdlbmVyYXRlU3R5bGUiLCJhcmdzIiwiY2xhc3NOYW1lIiwic3VwZXJTdHlsZSIsInN0cmluZ3MiLCJzaGlmdCIsImNvbnRlbnQiLCJyZWR1Y2UiLCJjc3NTdHJpbmciLCJpbmRleCIsImFyZyIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwic3R5bGUiLCJmcm9tTm9kZUFuZFRva2VucyIsImV4dGVuZHMiLCJyZXRyaWV2ZVN0eWxlIiwicmV0cmlldmVTdHlsZXNDU1MiLCJjbGFzc05hbWVzIiwiT2JqZWN0Iiwia2V5cyIsInN0eWxlc0NTUyIsInN0eWxlQ1NTIiwiYXNDU1MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmO0FBQUEsSUFBd0M7QUFDbENDLFVBQVVELFFBQVEsZUFBUixDQURoQixDLENBQzBDOztBQUUxQyxJQUFNRSxRQUFRRixRQUFRLFVBQVIsQ0FBZDs7QUFFTSxJQUFFRyxRQUFGLEdBQWVKLE1BQWYsQ0FBRUksUUFBRjtBQUFBLElBQ0VDLFNBREYsR0FDZ0JILE9BRGhCLENBQ0VHLFNBREY7OztBQUdOLElBQU1DLFdBQVdGLFNBQVNHLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxZQUFZSCxVQUFVRSxXQUFWLEVBRGxCO0FBQUEsSUFFTUUsV0FBVyxFQUZqQjs7QUFJQSxTQUFTQyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsU0FBN0IsRUFBMkQ7QUFBQSxNQUFuQkMsVUFBbUIsdUVBQU4sSUFBTTs7QUFDekQsTUFBTUMsVUFBVUgsS0FBS0ksS0FBTCxFQUFoQjtBQUFBLE1BQThCO0FBQ3hCQyxZQUFVRixRQUFRRyxNQUFSLENBQWUsVUFBU0QsT0FBVCxFQUFrQkUsU0FBbEIsRUFBNkJDLEtBQTdCLEVBQW9DO0FBQzNELFFBQU1DLE1BQU1ULEtBQUtRLEtBQUwsQ0FBWjs7QUFFQUgsZUFBV0UsU0FBWDs7QUFFQSxtQkFBZUUsR0FBZix5Q0FBZUEsR0FBZjtBQUNFLFdBQUssUUFBTDtBQUNFSixtQkFBV0ksR0FBWDtBQUNBOztBQUVGLFdBQUssVUFBTDtBQUNFSixtQkFBV0ksS0FBWDtBQUNBO0FBUEo7O0FBVUEsV0FBT0osT0FBUDtBQUNELEdBaEJTLEVBZ0JQLEVBaEJPLENBRGhCO0FBQUEsTUFrQk1LLFNBQVNmLFNBQVNnQixRQUFULENBQWtCTixPQUFsQixDQWxCZjtBQUFBLE1BbUJNTyxPQUFPZixVQUFVZ0IsS0FBVixDQUFnQkgsTUFBaEIsQ0FuQmI7QUFBQSxNQW9CTUksUUFBUXRCLE1BQU11QixpQkFBTixDQUF3QkgsSUFBeEIsRUFBOEJGLE1BQTlCLENBcEJkOztBQXNCTSxNQUFJUixlQUFlLElBQW5CLEVBQXlCO0FBQ3ZCWSxVQUFNRSxPQUFOLENBQWNkLFVBQWQ7QUFDRDs7QUFFREosV0FBU0csU0FBVCxJQUFzQmEsS0FBdEI7QUFDUDs7QUFFRCxTQUFTRyxhQUFULENBQXVCaEIsU0FBdkIsRUFBa0M7QUFDaEMsTUFBTWEsUUFBUWhCLFNBQVNHLFNBQVQsQ0FBZDs7QUFFQSxTQUFPYSxLQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksaUJBQVQsR0FBNkI7QUFDM0IsTUFBTUMsYUFBYUMsT0FBT0MsSUFBUCxDQUFZdkIsUUFBWixDQUFuQjtBQUFBLE1BQ013QixZQUFZSCxXQUFXYixNQUFYLENBQWtCLFVBQVNnQixTQUFULEVBQW9CckIsU0FBcEIsRUFBK0I7QUFDM0QsUUFBTWEsUUFBUUcsY0FBY2hCLFNBQWQsQ0FBZDtBQUFBLFFBQ01zQixXQUFXVCxNQUFNVSxLQUFOLENBQVl2QixTQUFaLENBRGpCOztBQUdBcUIsaUJBQWFDLFFBQWI7O0FBRUEsV0FBT0QsU0FBUDtBQUNELEdBUFcsRUFPVCxFQVBTLENBRGxCOztBQVVBLFNBQU9BLFNBQVA7QUFDRDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmM0IsOEJBRGU7QUFFZmtCLDhCQUZlO0FBR2ZDO0FBSGUsQ0FBakIiLCJmaWxlIjoic3R5bGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSwgLy8vXG4gICAgICBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpOyAvLy9cblxuY29uc3QgU3R5bGUgPSByZXF1aXJlKCcuLi9zdHlsZScpO1xuXG5jb25zdCB7IENTU0xleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IENTU1BhcnNlciB9ID0gcGFyc2VycztcblxuY29uc3QgY3NzTGV4ZXIgPSBDU1NMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgY3NzUGFyc2VyID0gQ1NTUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICBzdHlsZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVN0eWxlKGFyZ3MsIGNsYXNzTmFtZSwgc3VwZXJTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoZnVuY3Rpb24oY29udGVudCwgY3NzU3RyaW5nLCBpbmRleCkge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCArPSBjc3NTdHJpbmc7XG5cbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgIGNvbnRlbnQgKz0gYXJnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICBjb250ZW50ICs9IGFyZygpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgJycpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKHN1cGVyU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZS5leHRlbmRzKHN1cGVyU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSkge1xuICBjb25zdCBzdHlsZSA9IHN0eWxlTWFwW2NsYXNzTmFtZV07XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoZnVuY3Rpb24oc3R5bGVzQ1NTLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCAnJyk7XG5cbiAgcmV0dXJuIHN0eWxlc0NTUztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVzQ1NTXG59O1xuIl19