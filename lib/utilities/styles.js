'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var lexers = require('occam-lexers'),
    ///
parsers = require('occam-parsers'); ///

var Style = require('../style');

var CSSLexer = lexers.CSSLexer,
    CSSParser = parsers.CSSParser;


var cssLexer = CSSLexer.fromNothing(),
    cssParser = CSSParser.fromNothing(),
    styleMap = {};

function generateStyle(args, className) {
  var oldStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var strings = args.shift(),
      ///
  content = strings.reduce(function (content, cssString, index) {
    var arg = args[index];

    content += cssString;

    switch (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) {
      case 'string':
        content += arg;
        break;

      case 'function':
        content += arg();
        break;
    }

    return content;
  }, ''),
      tokens = cssLexer.tokenise(content),
      node = cssParser.parse(tokens),
      style = Style.fromNodeAndTokens(node, tokens);

  if (oldStyle !== null) {
    style.override(oldStyle);
  }

  styleMap[className] = style;
}

function retrieveStyle(className) {
  var style = styleMap[className];

  return style;
}

function retrieveStylesCSS() {
  var classNames = Object.keys(styleMap),
      stylesCSS = classNames.reduce(function (stylesCSS, className) {
    var style = retrieveStyle(className),
        styleCSS = style.asCSS(className);

    stylesCSS += styleCSS;

    return stylesCSS;
  }, '');

  return stylesCSS;
}

module.exports = {
  generateStyle: generateStyle,
  retrieveStyle: retrieveStyle,
  retrieveStylesCSS: retrieveStylesCSS
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvc3R5bGVzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJwYXJzZXJzIiwiU3R5bGUiLCJDU1NMZXhlciIsIkNTU1BhcnNlciIsImNzc0xleGVyIiwiZnJvbU5vdGhpbmciLCJjc3NQYXJzZXIiLCJzdHlsZU1hcCIsImdlbmVyYXRlU3R5bGUiLCJhcmdzIiwiY2xhc3NOYW1lIiwib2xkU3R5bGUiLCJzdHJpbmdzIiwic2hpZnQiLCJjb250ZW50IiwicmVkdWNlIiwiY3NzU3RyaW5nIiwiaW5kZXgiLCJhcmciLCJ0b2tlbnMiLCJ0b2tlbmlzZSIsIm5vZGUiLCJwYXJzZSIsInN0eWxlIiwiZnJvbU5vZGVBbmRUb2tlbnMiLCJvdmVycmlkZSIsInJldHJpZXZlU3R5bGUiLCJyZXRyaWV2ZVN0eWxlc0NTUyIsImNsYXNzTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwic3R5bGVzQ1NTIiwic3R5bGVDU1MiLCJhc0NTUyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7QUFBQSxJQUF3QztBQUNsQ0MsVUFBVUQsUUFBUSxlQUFSLENBRGhCLEMsQ0FDMEM7O0FBRTFDLElBQU1FLFFBQVFGLFFBQVEsVUFBUixDQUFkOztBQUVNLElBQUVHLFFBQUYsR0FBZUosTUFBZixDQUFFSSxRQUFGO0FBQUEsSUFDRUMsU0FERixHQUNnQkgsT0FEaEIsQ0FDRUcsU0FERjs7O0FBR04sSUFBTUMsV0FBV0YsU0FBU0csV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlILFVBQVVFLFdBQVYsRUFEbEI7QUFBQSxJQUVNRSxXQUFXLEVBRmpCOztBQUlBLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxTQUE3QixFQUF5RDtBQUFBLE1BQWpCQyxRQUFpQix1RUFBTixJQUFNOztBQUN2RCxNQUFNQyxVQUFVSCxLQUFLSSxLQUFMLEVBQWhCO0FBQUEsTUFBOEI7QUFDeEJDLFlBQVVGLFFBQVFHLE1BQVIsQ0FBZSxVQUFTRCxPQUFULEVBQWtCRSxTQUFsQixFQUE2QkMsS0FBN0IsRUFBb0M7QUFDM0QsUUFBTUMsTUFBTVQsS0FBS1EsS0FBTCxDQUFaOztBQUVBSCxlQUFXRSxTQUFYOztBQUVBLG1CQUFlRSxHQUFmLHlDQUFlQSxHQUFmO0FBQ0UsV0FBSyxRQUFMO0FBQ0VKLG1CQUFXSSxHQUFYO0FBQ0E7O0FBRUYsV0FBSyxVQUFMO0FBQ0VKLG1CQUFXSSxLQUFYO0FBQ0E7QUFQSjs7QUFVQSxXQUFPSixPQUFQO0FBQ0QsR0FoQlMsRUFnQlAsRUFoQk8sQ0FEaEI7QUFBQSxNQWtCTUssU0FBU2YsU0FBU2dCLFFBQVQsQ0FBa0JOLE9BQWxCLENBbEJmO0FBQUEsTUFtQk1PLE9BQU9mLFVBQVVnQixLQUFWLENBQWdCSCxNQUFoQixDQW5CYjtBQUFBLE1Bb0JNSSxRQUFRdEIsTUFBTXVCLGlCQUFOLENBQXdCSCxJQUF4QixFQUE4QkYsTUFBOUIsQ0FwQmQ7O0FBc0JNLE1BQUlSLGFBQWEsSUFBakIsRUFBdUI7QUFDckJZLFVBQU1FLFFBQU4sQ0FBZWQsUUFBZjtBQUNEOztBQUVESixXQUFTRyxTQUFULElBQXNCYSxLQUF0QjtBQUNQOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJoQixTQUF2QixFQUFrQztBQUNoQyxNQUFNYSxRQUFRaEIsU0FBU0csU0FBVCxDQUFkOztBQUVBLFNBQU9hLEtBQVA7QUFDRDs7QUFFRCxTQUFTSSxpQkFBVCxHQUE2QjtBQUMzQixNQUFNQyxhQUFhQyxPQUFPQyxJQUFQLENBQVl2QixRQUFaLENBQW5CO0FBQUEsTUFDTXdCLFlBQVlILFdBQVdiLE1BQVgsQ0FBa0IsVUFBU2dCLFNBQVQsRUFBb0JyQixTQUFwQixFQUErQjtBQUMzRCxRQUFNYSxRQUFRRyxjQUFjaEIsU0FBZCxDQUFkO0FBQUEsUUFDTXNCLFdBQVdULE1BQU1VLEtBQU4sQ0FBWXZCLFNBQVosQ0FEakI7O0FBR0FxQixpQkFBYUMsUUFBYjs7QUFFQSxXQUFPRCxTQUFQO0FBQ0QsR0FQVyxFQU9ULEVBUFMsQ0FEbEI7O0FBVUEsU0FBT0EsU0FBUDtBQUNEOztBQUVERyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2YzQiw4QkFEZTtBQUVma0IsOEJBRmU7QUFHZkM7QUFIZSxDQUFqQiIsImZpbGUiOiJzdHlsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGxleGVycyA9IHJlcXVpcmUoJ29jY2FtLWxleGVycycpLCAvLy9cbiAgICAgIHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyk7IC8vL1xuXG5jb25zdCBTdHlsZSA9IHJlcXVpcmUoJy4uL3N0eWxlJyk7XG5cbmNvbnN0IHsgQ1NTTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgQ1NTUGFyc2VyIH0gPSBwYXJzZXJzO1xuXG5jb25zdCBjc3NMZXhlciA9IENTU0xleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBjc3NQYXJzZXIgPSBDU1NQYXJzZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIHN0eWxlTWFwID0ge307XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGUoYXJncywgY2xhc3NOYW1lLCBvbGRTdHlsZSA9IG51bGwpIHtcbiAgY29uc3Qgc3RyaW5ncyA9IGFyZ3Muc2hpZnQoKSxcdC8vL1xuICAgICAgICBjb250ZW50ID0gc3RyaW5ncy5yZWR1Y2UoZnVuY3Rpb24oY29udGVudCwgY3NzU3RyaW5nLCBpbmRleCkge1xuICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaW5kZXhdO1xuXG4gICAgICAgICAgY29udGVudCArPSBjc3NTdHJpbmc7XG5cbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgIGNvbnRlbnQgKz0gYXJnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICBjb250ZW50ICs9IGFyZygpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfSwgJycpLFxuICAgICAgICB0b2tlbnMgPSBjc3NMZXhlci50b2tlbmlzZShjb250ZW50KSxcbiAgICAgICAgbm9kZSA9IGNzc1BhcnNlci5wYXJzZSh0b2tlbnMpLFxuICAgICAgICBzdHlsZSA9IFN0eWxlLmZyb21Ob2RlQW5kVG9rZW5zKG5vZGUsIHRva2Vucyk7XG5cbiAgICAgICAgaWYgKG9sZFN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgc3R5bGUub3ZlcnJpZGUob2xkU3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVNYXBbY2xhc3NOYW1lXSA9IHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlKGNsYXNzTmFtZSkge1xuICBjb25zdCBzdHlsZSA9IHN0eWxlTWFwW2NsYXNzTmFtZV07XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0eWxlc0NTUygpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IE9iamVjdC5rZXlzKHN0eWxlTWFwKSxcbiAgICAgICAgc3R5bGVzQ1NTID0gY2xhc3NOYW1lcy5yZWR1Y2UoZnVuY3Rpb24oc3R5bGVzQ1NTLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IHJldHJpZXZlU3R5bGUoY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICBzdHlsZUNTUyA9IHN0eWxlLmFzQ1NTKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICBzdHlsZXNDU1MgKz0gc3R5bGVDU1M7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQ1NTO1xuICAgICAgICB9LCAnJyk7XG5cbiAgcmV0dXJuIHN0eWxlc0NTUztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdlbmVyYXRlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGUsXG4gIHJldHJpZXZlU3R5bGVzQ1NTXG59O1xuIl19