"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.query = query;
exports.queryByTagName = queryByTagName;
exports.queryByClassName = queryByClassName;
exports.queryByReactClass = queryByReactClass;
exports.queryByReactFunction = queryByReactFunction;
exports.queryByReactComponent = queryByReactComponent;
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function query(element, test) {
    var foundDescendant = queryDescendant(element, test), descendant = foundDescendant; ///
    return descendant;
}
function queryByTagName(element1) {
    for(var _len = arguments.length, tagNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        tagNames[_key - 1] = arguments[_key];
    }
    return query(element1, function(element) {
        return tagNames.some(function(tagName) {
            return element.getTagName && toLowerCase(element.getTagName()) === tagName;
        });
    });
}
function queryByClassName(element2) {
    for(var _len = arguments.length, classNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        classNames[_key - 1] = arguments[_key];
    }
    return query(element2, function(element) {
        return classNames.some(function(className) {
            return element.hasClass && element.hasClass(className);
        });
    });
}
function queryByReactClass(element3) {
    for(var _len = arguments.length, reactClasses = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        reactClasses[_key - 1] = arguments[_key];
    }
    return query(element3, function(element) {
        return reactClasses.some(function(reactClass) {
            return element.reactClass === reactClass;
        });
    });
}
function queryByReactFunction(element4) {
    for(var _len = arguments.length, reactFunctions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        reactFunctions[_key - 1] = arguments[_key];
    }
    return query(element4, function(element) {
        return reactFunctions.some(function(reactFunction) {
            return element.reactFunction === reactFunction;
        });
    });
}
function queryByReactComponent(element5) {
    for(var _len = arguments.length, ReactComponents = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        ReactComponents[_key - 1] = arguments[_key];
    }
    return query(element5, function(element) {
        return ReactComponents.some(function(ReactComponent) {
            return _instanceof(element.reactComponent, ReactComponent);
        });
    });
}
function queryDescendant(element, test) {
    var children = element.getChildren(), foundDescendant1 = children.reduce(function(foundDescendant, child) {
        if (foundDescendant === null) {
            var found = test(child);
            if (found) {
                foundDescendant = child; ///
            } else {
                foundDescendant = queryDescendant(child, test);
            }
        }
        return foundDescendant;
    }, null);
    return foundDescendant1;
}
function toLowerCase(tagName) {
    return tagName === null ? null : tagName.toLowerCase();
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,